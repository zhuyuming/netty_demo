<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- singleton 作用域：
        如果作用域设置为 singleton，那么 Spring IoC 容器刚好创建一个由该 bean 定义的对象的实例。
        该单一实例将存储在这种单例 bean 的高速缓存中，以及针对该 bean 的所有后续的请求和引用都返回缓存对象。
        默认作用域是始终是 singleton，但是当仅仅需要 bean 的一个实例时，你可以在 bean 的配置文件中设置作
        用域的属性为 singleton -->

    <bean id="helloWorld" class="com.tutorialspoint.HelloWorld" init-method="init" destroy-method="destroy" >
        <property name="message" value="Hello World!"/>
    </bean>

    <bean id="helloWorldsingleton" class="com.tutorialspoint.HelloWorldSingleton" scope="singleton">
    </bean>

    <bean id="helloWorldprototype" class="com.tutorialspoint.HelloWorldPrototype" scope="prototype">
    </bean>

    <!-- 继承关系 -->
    <bean id="helloWorldparent" class="com.tutorialspoint.HelloWorldParent">
        <property name="message1" value="Hello World!"/>
        <property name="message2" value="Hello Second World!"/>
    </bean>

    <bean id="helloIndia" class="com.tutorialspoint.HelloIndia" parent="helloWorldparent">
        <property name="message1" value="Hello India!"/>
        <property name="message2" value="message2 India!"/>
        <property name="message3" value="Namaste India!"/>
    </bean>

    <!--基于构造函数的依赖注入-->
    <!-- Definition for textEditor bean -->
    <bean id="textEditor" class="com.tutorialspoint.TextEditor">
        <constructor-arg ref="spellChecker"/>
    </bean>
    <!-- Definition for spellChecker bean -->
    <bean id="spellChecker" class="com.tutorialspoint.SpellChecker">
    </bean>
    <!-- 基于构造函数的依赖注入 构造函数多个参数 -->
    <bean id="foo" class="com.tutorialspoint.Foo">
        <constructor-arg type="int" value="2001"/>
        <constructor-arg type="java.lang.String" value="Zara"/>
    </bean>
    <!--
    <bean id="exampleBean" class="examples.ExampleBean">
      <constructor-arg index="0" value="2001"/>
      <constructor-arg index="1" value="Zara"/>
   </bean>
    -->

    <!-- 抽象类Bean模板
     <bean id="beanTeamplate" abstract="true">
          <property name="message1" value="Hello World!"/>
          <property name="message2" value="Hello Second World!"/>
          <property name="message3" value="Namaste India!"/>
       </bean>

       <bean id="helloIndia" class="com.tutorialspoint.HelloIndia" parent="beanTeamplate">
          <property name="message1" value="Hello India!"/>
          <property name="message3" value="Namaste India!"/>
       </bean>
     -->


    <!--Spring 基于设值函数的依赖注入-->
    <!-- 如果你要把一个引用传递给一个对象，那么你需要使用 标签的 ref 属性，而如果你要直接传递一个值，那么你应该使用 value 属性。 -->
    <!--
    <bean id="user" class="com.tutorialspoint.User">
        <property name="name" value="Zhao" />
        <property name="age" value="22" />
        <property name="country" ref="jane" />
    </bean>
    <bean name="jane" class="com.tutorialspoint.Person">
        <property name="name" value="John Doe"/>
    </bean>
    -->
    <!--简写-->
    <bean id="user" class="com.tutorialspoint.User" p:name="Zhao" p:age="22" p:country-ref="jane">
    </bean>
    <bean name="jane" class="com.tutorialspoint.Person" p:name="John Doe">
    </bean>

    <!-- 内部 bean 为基于 setter 注入 -->
    <!-- Definition for textEditor bean using inner bean -->
    <bean id="textEditor1" class="com.tutorialspoint.TextEditor1">
        <property name="spellChecker">
            <bean id="spellChecker" class="com.tutorialspoint.SpellChecker"/>
        </property>
    </bean>

    <!-- 注入集合 -->
    <bean id="javaCollection" class="com.tutorialspoint.JavaCollection">

        <!-- results in a setAddressList(java.util.List) call -->
        <property name="addressList">
            <list>
                <value>INDIA</value>
                <value>Pakistan</value>
                <value>USA</value>
                <value>USA</value>
            </list>
        </property>

        <!-- results in a setAddressSet(java.util.Set) call -->
        <property name="addressSet">
            <set>
                <value>INDIA</value>
                <value>Pakistan</value>
                <value>USA</value>
                <value>USA</value>
            </set>
        </property>

        <!-- results in a setAddressMap(java.util.Map) call -->
        <property name="addressMap">
            <map>
                <entry key="1" value="INDIA"/>
                <entry key="2" value="Pakistan"/>
                <entry key="3" value="USA"/>
                <entry key="4" value="USA"/>
            </map>
        </property>

        <!-- results in a setAddressProp(java.util.Properties) call -->
        <property name="addressProp">
            <props>
                <prop key="one">INDIA</prop>
                <prop key="two">Pakistan</prop>
                <prop key="three">USA</prop>
                <prop key="four">USA</prop>
            </props>
        </property>

    </bean>

    <!-- Bean Definition to handle references and values
    <bean id="..." class="...">
        <property name="addressList">
            <list>
                <ref bean="address1"/>
                <ref bean="address2"/>
                <value>Pakistan</value>
            </list>
        </property>
        <property name="addressSet">
            <set>
                <ref bean="address1"/>
                <ref bean="address2"/>
                <value>Pakistan</value>
            </set>
        </property>
        <property name="addressMap">
            <map>
                <entry key="one" value="INDIA"/>
                <entry key ="two" value-ref="address1"/>
                <entry key ="three" value-ref="address2"/>
            </map>
        </property>

    </bean>
-->
    <!--注入null-->
    <!--
    <bean id="..." class="exampleBean">
        <property name="email"><null/></property>
    </bean>
    -->

    <!-- 自动装配 byname -->
    <bean id="textEditor2" class="com.tutorialspoint.TextEditor2"
          autowire="byName">
        <property name="name" value="Generic Text Editor2" />
    </bean>

    <!-- 自动装配 byType -->
    <bean id="textEditor3" class="com.tutorialspoint.TextEditor3"
          autowire="byType">
        <property name="name" value="Generic Text Editor3" />
    </bean>

    <!-- 自动装配 构造函数 -->
    <bean id="textEditor4" class="com.tutorialspoint.TextEditor4"
          autowire="constructor">
        <constructor-arg value="Generic Text Editor4"/>
    </bean>


    <!-- 前置与后置运行 -->
    <bean class="com.tutorialspoint.InitHelloWorld" />
</beans>